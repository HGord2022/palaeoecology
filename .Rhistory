options(scipen=999)
Functional_entities <- T
Taxonomic <- T
MPO <- T
Quantile <- F
quantile <- 0.75
Localities <- T
loc <- 4
Bins <- F
bin_l <- 0.5
occ <- read.xlsx("")
setwd("/Users/pey25guu/github_repos/palaeoecology")
occ <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology")
occ <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology", 2)
occ <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology/abd5110_blanco_data-file-s1.xlsx")
View(occ)
occ <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology/abd5110_blanco_data-file-s1.xlsx", 2)
View(occ)
occ <- read.xlsx("occ data Blanco et al. 2021.xlsx")
sites <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology/abd5110_blanco_data-file-s1.xlsx", 1)
fdata <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology/abd5110_blanco_data-file-s1.xlsx", 2)
rownames(fdata) <- paste(fdata$genus, fdata$species, sep="_")
fdata <- fdata[c("body_size_cat_corrected", "diet_cat","locomotion_cat")]
names(fdata) <- c("body_size_cat", "diet", "locomotion")
if(Taxonomic==T){
###We check that we have the same sites in the matrix and the sites database
sites_def <- sites$site
occ <- occ[,sites_def]
###We use the occ as the matrix for the network analysis
occ_analysis <- occ
}
if(MPO==T){
####Sampling one carnivore and 2 of 3 artiodactyl-perissodactyl-proboscidean
###Load the functional traits data
order_sampling <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology/abd5110_blanco_data-file-s1.xlsx")
##### Vector with the same order as occ with the names of the orders
order_vector<- as.vector(order_sampling$order)
##### Change species names in occ by order names in the vector with aggregate
names(order_vector) <- rownames(occ)
order_occ <- aggregate(occ, by=list(order_vector),sum)
rownames(order_occ)=order_occ$Group.1
order_occ<- order_occ[,-1]
######## Take only sites with at least 1 carnivore and 2 of 3 inside artiodactyl-perissodactyl-proboscidean
order_final <- order_occ[row.names(order_occ)=="Carnivora"|row.names(order_occ)=="Artiodactyla"|row.names(order_occ)=="Perissodactyla"|row.names(order_occ)=="Proboscidea",]
order_final[order_final!=0] <- 1
####First with the 3 herbivores groups
rest_order <- order_final[row.names(order_final)=="Artiodactyla"|row.names(order_final)=="Perissodactyla"|row.names(order_final)=="Proboscidea",]
rest_order <- rest_order[colSums(rest_order)>=2]
####Second with the carnivores
carnivora <- order_final[row.names(order_final)=="Carnivora",]
carnivora <- carnivora[colSums(carnivora)!=0]
#####Combine the two matrix to get the sites with  our condition for the sampling
order_sites <- colnames(carnivora)[match(colnames(rest_order),colnames(carnivora))]
order_sites <- order_sites[!is.na(order_sites)]
####we only take sites from the order_final
occ_sampling_order<- occ[,order_sites]
occ_sampling_order<- occ_sampling_order[colSums(occ_sampling_order)>4]
####remove rows that sum=0
occ_sampling_order<- occ_sampling_order[rowSums(occ_sampling_order)!=0,]
###We add the current localities, because we know that they are well sample
current_data <- occ[,colnames(occ)=="Barcelona" | colnames(occ)=="Sanlucar" ]
occ_MPO_total <- merge(occ_sampling_order, current_data,by="row.names",all=T,sort=T)
rownames(occ_MPO_total) <- occ_MPO_total[,1]
occ_MPO_total <- occ_MPO_total[,-1]
occ_MPO_total[is.na(occ_MPO_total)] <-0
######We take only sites in the MPO sampling
sites <- sites[match(colnames(occ_order_actuales),sites$site),]
####We transform to get our matrix for the analysis
occ_analysis <- occ_order_actuales
}
###Load the functional traits data
order_sampling <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology/abd5110_blanco_data-file-s1.xlsx", 2)
if(MPO==T){
####Sampling one carnivore and 2 of 3 artiodactyl-perissodactyl-proboscidean
###Load the functional traits data
order_sampling <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology/abd5110_blanco_data-file-s1.xlsx", 2)
##### Vector with the same order as occ with the names of the orders
order_vector<- as.vector(order_sampling$order)
##### Change species names in occ by order names in the vector with aggregate
names(order_vector) <- rownames(occ)
order_occ <- aggregate(occ, by=list(order_vector),sum)
rownames(order_occ)=order_occ$Group.1
order_occ<- order_occ[,-1]
######## Take only sites with at least 1 carnivore and 2 of 3 inside artiodactyl-perissodactyl-proboscidean
order_final <- order_occ[row.names(order_occ)=="Carnivora"|row.names(order_occ)=="Artiodactyla"|row.names(order_occ)=="Perissodactyla"|row.names(order_occ)=="Proboscidea",]
order_final[order_final!=0] <- 1
####First with the 3 herbivores groups
rest_order <- order_final[row.names(order_final)=="Artiodactyla"|row.names(order_final)=="Perissodactyla"|row.names(order_final)=="Proboscidea",]
rest_order <- rest_order[colSums(rest_order)>=2]
####Second with the carnivores
carnivora <- order_final[row.names(order_final)=="Carnivora",]
carnivora <- carnivora[colSums(carnivora)!=0]
#####Combine the two matrix to get the sites with  our condition for the sampling
order_sites <- colnames(carnivora)[match(colnames(rest_order),colnames(carnivora))]
order_sites <- order_sites[!is.na(order_sites)]
####we only take sites from the order_final
occ_sampling_order<- occ[,order_sites]
occ_sampling_order<- occ_sampling_order[colSums(occ_sampling_order)>4]
####remove rows that sum=0
occ_sampling_order<- occ_sampling_order[rowSums(occ_sampling_order)!=0,]
###We add the current localities, because we know that they are well sample
current_data <- occ[,colnames(occ)=="Barcelona" | colnames(occ)=="Sanlucar" ]
occ_MPO_total <- merge(occ_sampling_order, current_data,by="row.names",all=T,sort=T)
rownames(occ_MPO_total) <- occ_MPO_total[,1]
occ_MPO_total <- occ_MPO_total[,-1]
occ_MPO_total[is.na(occ_MPO_total)] <-0
######We take only sites in the MPO sampling
sites <- sites[match(colnames(occ_order_actuales),sites$site),]
####We transform to get our matrix for the analysis
occ_analysis <- occ_order_actuales
}
if(MPO==T){
####Sampling one carnivore and 2 of 3 artiodactyl-perissodactyl-proboscidean
###Load the functional traits data
order_sampling <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology/abd5110_blanco_data-file-s1.xlsx", 2)
##### Vector with the same order as occ with the names of the orders
order_vector<- as.vector(order_sampling$order)
##### Change species names in occ by order names in the vector with aggregate
names(order_vector) <- rownames(occ)
order_occ <- aggregate(occ, by=list(order_vector),sum)
rownames(order_occ)=order_occ$Group.1
order_occ<- order_occ[,-1]
######## Take only sites with at least 1 carnivore and 2 of 3 inside artiodactyl-perissodactyl-proboscidean
order_final <- order_occ[row.names(order_occ)=="Carnivora"|row.names(order_occ)=="Artiodactyla"|row.names(order_occ)=="Perissodactyla"|row.names(order_occ)=="Proboscidea",]
order_final[order_final!=0] <- 1
####First with the 3 herbivores groups
rest_order <- order_final[row.names(order_final)=="Artiodactyla"|row.names(order_final)=="Perissodactyla"|row.names(order_final)=="Proboscidea",]
rest_order <- rest_order[colSums(rest_order)>=2]
####Second with the carnivores
carnivora <- order_final[row.names(order_final)=="Carnivora",]
carnivora <- carnivora[colSums(carnivora)!=0]
#####Combine the two matrix to get the sites with  our condition for the sampling
order_sites <- colnames(carnivora)[match(colnames(rest_order),colnames(carnivora))]
order_sites <- order_sites[!is.na(order_sites)]
####we only take sites from the order_final
occ_sampling_order<- occ[,order_sites]
occ_sampling_order<- occ_sampling_order[colSums(occ_sampling_order)>4]
####remove rows that sum=0
occ_sampling_order<- occ_sampling_order[rowSums(occ_sampling_order)!=0,]
###We add the current localities, because we know that they are well sample
current_data <- occ[,colnames(occ)=="Barcelona" | colnames(occ)=="Sanlucar" ]
occ_MPO_total <- merge(occ_sampling_order, current_data,by="row.names",all=T,sort=T)
rownames(occ_MPO_total) <- occ_MPO_total[,1]
occ_MPO_total <- occ_MPO_total[,-1]
occ_MPO_total[is.na(occ_MPO_total)] <-0
######We take only sites in the MPO sampling
sites <- sites[match(colnames(occ_order_actuales),sites$site),]
####We transform to get our matrix for the analysis
occ_analysis <- occ_order_actuales
}
if(Quantile==T){
######Sampling quartile
mid_ages <- (sites$first+sites$last)/2
names(mid_ages) <- sites$site
occ <- occ[,sites$site]
bins <- as.numeric(cut(mid_ages, breaks=c(-1,0.001,0.0117,0.126,0.781,1.8,2.58,3.6,5.3,7.246,11.63,13.82,15.97,20.44,23.03))) # seq(0,1.2,0.2)
names(bins) <-sites$site
cbind(mid_ages,bins)
quantiles <- aggregate(colSums(occ), by=list(bins), function(x){quantile(x,probs = quantile)})
rich_locs_l <- list()
b <- 14
for(b in 1:14){
occ_bin <- occ[,bins%in%b]
rich_locs_l[[b]] <- colnames(occ_bin)[which(colSums(occ_bin) >= quantiles[b,2])]
}
rich_locs_l
quantil_sampling <- unlist(rich_locs_l)
####we only take sites from the quantile
occ_quantile<- occ[,quantil_sampling]
####remove rows that sum=0
occ_quantile<- occ_quantile[rowSums(occ_quantile)!=0,]
###We transformed into our data for the analysis
occ_analysis <- occ_quantile
}
if(Localities==T){
######To check that we do not have localities with less than 5 species
occ_analysis<- occ_analysis[colSums(occ_analysis)>loc]
occ_analysis<- occ_analysis[rowSums(occ_analysis)!=0,]
}
if(Functional_entities==T){
##Check that we do not have NAs
fdata <- fdata[(!is.na(fdata[,1]) & !is.na(fdata[,2]) & !is.na(fdata[,3])),]
###Order the categories
bs_ordered <- c("< 1","1-10","10-45","45-90","90-180","180-360","360-1000",">1000")
fdata$body_size_cat <- ordered(fdata$body_size_cat, levels= bs_ordered)
fdata$locomotion <- as.factor(fdata$locomotion)
fdata$diet <- as.factor(fdata$diet)
####### To take only species in our selected sampling method
fdata <- fdata[match(rownames(occ_analysis),rownames(fdata)),]
###To create the functional entities
func_ent <- paste(fdata$body_size_cat,fdata$diet, fdata$locomotion, sep="_")
names(func_ent) <- rownames(fdata)
fe <- unique(func_ent)
######## Combine the matrix to have fe in the rows
occ_analysis <- aggregate(occ_analysis, by=list(func_ent),sum)
rownames(occ_analysis)=occ_analysis$Group.1
occ_analysis<- occ_analysis[,-1]
}
if(Bins==T){
####Create the bins from the sites information
sites$mean_age <-(sites$first+sites$last)/2
bin_lab <- seq(bin_l,ceiling(max(sites$mean_age)),bin_l)
mid_ages_bins <- bin_lab-bin_l/2
bin_lab <- paste(bin_lab-bin_l,"-",bin_lab)
sites$bin <- as.numeric(cut(sites$mean_age,breaks=seq(0,ceiling(max(sites$mean_age)),bin_l),include.lowest = T))
#####nº of localities per bin
n_localities<- table(bin_lab[sites$bin])
bin_lab <- unique(bin_lab[sites$bin])
mid_ages_bins <- unique(mid_ages_bins[sites$bin])
occ_fe_bins <- t(occ_analysis)
bins_sites <- sites$bin[match(rownames(occ_fe_bins),sites$site)]
occ_fe_bins <- aggregate(occ_fe_bins, by=list(bins_sites), sum)
rownames(occ_fe_bins) <- occ_fe_bins$Group.1
occ_fe_bins <- occ_fe_bins[,-1]
rownames(occ_fe_bins) <- bin_lab
occ_fe_bins <- t(occ_fe_bins)
###We transformed into our data for the analysis
occ_analysis <- occ_fe_bins
}
#####Load the function to run Infomap for the network analysis
mat.link.input<-function(mat){
edg<-list()
for(i in 1:ncol(mat)){
edg[[i]]<-cbind(i,(which(mat[,i]>0)+ncol(mat)),mat[which(mat[,i]>0),i])
}
do.call(rbind,edg)
}
write.input.info<-function(mat,path,file){
link.node<-mat.link.input(mat)
vert<-cbind(c(1:(ncol(mat)+nrow(mat))),c(colnames(mat),rownames(mat)))
input<-list(cbind("*Vertices",nrow(vert)),vert,cbind("*Edges",nrow(link.node)),link.node)
write.table(input[[1]], paste(path,file,sep=""),row.names=F,col.names=F,quote=F )
write.table(input[[2]], paste(path,file,sep=""), append= T,row.names=F,col.names=F,quote=c(2))
write.table(input[[3]], paste(path,file,sep=""), append= T,row.names=F,col.names=F,quote=F )
write.table(input[[4]], paste(path,file,sep=""), append= T,row.names=F,col.names=F,quote=F)
return(input)
}
run.infomap <- function(path.info, path.in, name, extension, path.out, parameters){
system(paste("bash -c", shQuote(paste("cd ", path.info ," && ./Infomap ", path.in, name , extension  ," ", path.out, " ", parameters, sep=""),type="sh")),wait=T)
out.win<-gsub("/mnt/c","C:",path.out)
par<-read.table(paste(out.win,name,".tree",sep=""))
quality <- read.csv(paste(out.win,name,".tree",sep=""),nrows=1,sep="",check.names=F)
quality <- as.numeric(names(quality)[grep("codelength",names(quality))+1])
quality <- 1- quality [2]/quality [1]
list(par,quality)
}
sam.val.fun <- function(x,path.unix,grep,treshold,Ntrain,Ntest,Nsam){
path.win<-gsub("/mnt/c","C:",path.unix)
setwd(path.win)
write.table(x,"input_partitions.txt",sep=" ",row.names=F,col.names=F,quote=F)
k<- paste(Ntrain,Ntest,Nsam,sep=" ")
system(paste("bash -c", shQuote(paste("cd ",path.unix," && ./partition-validation -s ", runif(1,0,1000)," -t ", treshold, " --validation-sampling ", k, " input_partitions.txt ", grep, sep=""),type="sh")),wait=T)
read.table(paste(grep,"_validation",sep=""))
}
jac.fun<-function(x,y){sum(x%in%y)/length(unique(c(x,y)))}
# Input #
# ::::: #
file <-  ""
path <-  ""
write.input.info(occ_analysis,path,file)
# To run infomap #
# :::::::::::::: #
path.info<-""
path.in<-""
name<-""
extension<-""
path.out<-""
par <- list()
q <- c()
for( i in 1:100){
seed <- sample(1:1000,1)
parameters<-paste("-N 100", "-s",seed)
res.i <- run.infomap (path.info, path.in, name, extension, path.out, parameters)
par[[i]] <- res.i[[1]]
q[[i]] <- res.i[[2]]
print(rep(i,100))
}
######Load the packages########
setwd("/Users/pey25guu/github_repos/palaeoecology")
library(bipartite)
library(picante)
library(googlesheets)
library(hrbrthemes)
library(RColorBrewer)
library(viridis)
library(googlesheets4)
library(igraph)
library(gridExtra)
library(ggplot2)
library(openxlsx)
library(nlme)
library(paleoTS)
library(plotrix)
library(wesanderson)
library(munsell)
library(RColorBrewer)
library(stringr)
library(dplyr)
library(tidyr)
library(vegan)
library(doParallel)
options(stringsAsFactors = FALSE)
options(scipen=999)
Functional_entities <- T
Taxonomic <- T
MPO <- T
Quantile <- F
quantile <- 0.75
Localities <- T
loc <- 4
Bins <- F
bin_l <- 0.5
occ <- read.xlsx("occ data Blanco et al. 2021.xlsx")
sites <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology/abd5110_blanco_data-file-s1.xlsx", 1)
fdata <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology/abd5110_blanco_data-file-s1.xlsx", 2)
rownames(fdata) <- paste(fdata$genus, fdata$species, sep="_")
fdata <- fdata[c("body_size_cat_corrected", "diet_cat","locomotion_cat")]
fdata <- fdata[c("body_size", "diet","locomotion")]
fdata <- fdata[c("body size", "diet","locomotion")]
######Load the packages########
setwd("/Users/pey25guu/github_repos/palaeoecology")
library(bipartite)
library(picante)
library(googlesheets)
library(hrbrthemes)
library(RColorBrewer)
library(viridis)
library(googlesheets4)
library(igraph)
library(gridExtra)
library(ggplot2)
library(openxlsx)
library(nlme)
library(paleoTS)
library(plotrix)
library(wesanderson)
library(munsell)
library(RColorBrewer)
library(stringr)
library(dplyr)
library(tidyr)
library(vegan)
library(doParallel)
options(stringsAsFactors = FALSE)
options(scipen=999)
Functional_entities <- T
Taxonomic <- T
MPO <- T
Quantile <- F
quantile <- 0.75
Localities <- T
loc <- 4
Bins <- F
bin_l <- 0.5
occ <- read.xlsx("occ data Blanco et al. 2021.xlsx")
sites <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology/abd5110_blanco_data-file-s1.xlsx", 1)
fdata <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology/abd5110_blanco_data-file-s1.xlsx", 2)
rownames(fdata) <- paste(fdata$genus, fdata$species, sep="_")
fdata <- fdata[c("body size", "diet","locomotion")]
View(fdata)
fdata <- fdata[c("body.size", "diet","locomotion")]
names(fdata) <- c("body_size", "diet", "locomotion")
View(fdata)
if(Taxonomic==T){
###We check that we have the same sites in the matrix and the sites database
sites_def <- sites$site
occ <- occ[,sites_def]
###We use the occ as the matrix for the network analysis
occ_analysis <- occ
}
if(MPO==T){
####Sampling one carnivore and 2 of 3 artiodactyl-perissodactyl-proboscidean
###Load the functional traits data
order_sampling <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology/abd5110_blanco_data-file-s1.xlsx", 2)
##### Vector with the same order as occ with the names of the orders
order_vector<- as.vector(order_sampling$order)
##### Change species names in occ by order names in the vector with aggregate
names(order_vector) <- rownames(occ)
order_occ <- aggregate(occ, by=list(order_vector),sum)
rownames(order_occ)=order_occ$Group.1
order_occ<- order_occ[,-1]
######## Take only sites with at least 1 carnivore and 2 of 3 inside artiodactyl-perissodactyl-proboscidean
order_final <- order_occ[row.names(order_occ)=="Carnivora"|row.names(order_occ)=="Artiodactyla"|row.names(order_occ)=="Perissodactyla"|row.names(order_occ)=="Proboscidea",]
order_final[order_final!=0] <- 1
####First with the 3 herbivores groups
rest_order <- order_final[row.names(order_final)=="Artiodactyla"|row.names(order_final)=="Perissodactyla"|row.names(order_final)=="Proboscidea",]
rest_order <- rest_order[colSums(rest_order)>=2]
####Second with the carnivores
carnivora <- order_final[row.names(order_final)=="Carnivora",]
carnivora <- carnivora[colSums(carnivora)!=0]
#####Combine the two matrix to get the sites with  our condition for the sampling
order_sites <- colnames(carnivora)[match(colnames(rest_order),colnames(carnivora))]
order_sites <- order_sites[!is.na(order_sites)]
####we only take sites from the order_final
occ_sampling_order<- occ[,order_sites]
occ_sampling_order<- occ_sampling_order[colSums(occ_sampling_order)>4]
####remove rows that sum=0
occ_sampling_order<- occ_sampling_order[rowSums(occ_sampling_order)!=0,]
###We add the current localities, because we know that they are well sample
current_data <- occ[,colnames(occ)=="Barcelona" | colnames(occ)=="Sanlucar" ]
occ_MPO_total <- merge(occ_sampling_order, current_data,by="row.names",all=T,sort=T)
rownames(occ_MPO_total) <- occ_MPO_total[,1]
occ_MPO_total <- occ_MPO_total[,-1]
occ_MPO_total[is.na(occ_MPO_total)] <-0
######We take only sites in the MPO sampling
sites <- sites[match(colnames(occ_order_actuales),sites$site),]
####We transform to get our matrix for the analysis
occ_analysis <- occ_order_actuales
}
if(MPO==T){
####Sampling one carnivore and 2 of 3 artiodactyl-perissodactyl-proboscidean
###Load the functional traits data
order_sampling <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology/abd5110_blanco_data-file-s1.xlsx", 2)
##### Vector with the same order as occ with the names of the orders
order_vector<- as.vector(order_sampling$order)
##### Change species names in occ by order names in the vector with aggregate
names(order_vector) <- rownames(occ)
order_occ <- aggregate(occ, by=list(order_vector),sum)
rownames(order_occ)=order_occ$Group.1
order_occ<- order_occ[,-1]
######## Take only sites with at least 1 carnivore and 2 of 3 inside artiodactyl-perissodactyl-proboscidean
order_final <- order_occ[row.names(order_occ)=="Carnivora"|row.names(order_occ)=="Artiodactyla"|row.names(order_occ)=="Perissodactyla"|row.names(order_occ)=="Proboscidea",]
order_final[order_final!=0] <- 1
####First with the 3 herbivores groups
rest_order <- order_final[row.names(order_final)=="Artiodactyla"|row.names(order_final)=="Perissodactyla"|row.names(order_final)=="Proboscidea",]
rest_order <- rest_order[colSums(rest_order)>=2]
####Second with the carnivores
carnivora <- order_final[row.names(order_final)=="Carnivora",]
carnivora <- carnivora[colSums(carnivora)!=0]
#####Combine the two matrix to get the sites with  our condition for the sampling
order_sites <- colnames(carnivora)[match(colnames(rest_order),colnames(carnivora))]
order_sites <- order_sites[!is.na(order_sites)]
####we only take sites from the order_final
occ_sampling_order<- occ[,order_sites]
occ_sampling_order<- occ_sampling_order[colSums(occ_sampling_order)>4]
####remove rows that sum=0
occ_sampling_order<- occ_sampling_order[rowSums(occ_sampling_order)!=0,]
###We add the current localities, because we know that they are well sample
current_data <- occ[,colnames(occ)=="Barcelona" | colnames(occ)=="Sanlucar" ]
occ_MPO_total <- merge(occ_sampling_order, current_data,by="row.names",all=T,sort=T)
rownames(occ_MPO_total) <- occ_MPO_total[,1]
occ_MPO_total <- occ_MPO_total[,-1]
occ_MPO_total[is.na(occ_MPO_total)] <-0
######We take only sites in the MPO sampling
sites <- sites[match(colnames(occ_order_actuales),sites$site),]
####We transform to get our matrix for the analysis
occ_analysis <- occ_order_actuales
}
###Load the functional traits data
order_sampling <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology/abd5110_blanco_data-file-s1.xlsx", 2)
View(order_sampling)
##### Vector with the same order as occ with the names of the orders
order_vector<- as.vector(order_sampling$order)
##### Change species names in occ by order names in the vector with aggregate
names(order_vector) <- rownames(occ)
order_occ <- aggregate(occ, by=list(order_vector),sum)
View(occ_analysis)
View(occ)
###Load the functional traits data
order_sampling <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology/abd5110_blanco_data-file-s1.xlsx", 2)
##### Vector with the same order as occ with the names of the orders
order_vector<- as.vector(order_sampling$order)
##### Change species names in occ by order names in the vector with aggregate
names(order_vector) <- rownames(occ)
View(occ)
occ <- read.xlsx("occ data Blanco et al. 2021.xlsx")
###We use the occ as the matrix for the network analysis
occ_analysis <- occ
###Load the functional traits data
order_sampling <- read.xlsx("/Users/pey25guu/github_repos/palaeoecology/abd5110_blanco_data-file-s1.xlsx", 2)
##### Vector with the same order as occ with the names of the orders
order_vector<- as.vector(order_sampling$order)
##### Change species names in occ by order names in the vector with aggregate
names(order_vector) <- rownames(occ)
order_occ <- aggregate(occ, by=list(order_vector),sum)
View(order_sampling)
View(occ)
View(order_sampling)
View(occ)
setwd("/Users/pey25guu/github_repos/palaeoecology")
# Load the packages
library(vegan)
library(picante)
library(knitr)
library(vtable)
library("dplyr")
library("ggplot2")
library("ggpubr")
library(permute)
library(lattice)
library(vegan)
library(statnet.common)
library(network)
library(sna)
library(bipartite)
library(picante)
library(knitr)
library(igraph)
library(plotly)
library("geomnet")
install.packages("geomnet")
setwd("/Users/pey25guu/github_repos/palaeoecology")
#dinosaur 5 time zones known
dinosaur5edgestime2<- read.csv("dinosaur5edgestime2.csv")
colnames(dinosaur5edgestime2) <- c("from", "to", "weight")
#Create graph for the algorithms
g <- graph_from_data_frame(dinosaur5edgestime2, directed = FALSE)
# Louvain
lc <- cluster_louvain(g)
membership(lc)
communities(lc)
plot(lc, g)
